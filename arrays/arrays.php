<?php
/*
We can look at the definition from http://php.net:
An array in PHP is actually an ordered map. A map is a type that associates values to
keys. This type is optimized for several different uses; it can be treated as an array, list
(vector), hash table (an implementation of a map), dictionary, collection, stack, queue,
and probably more. As array values can be other arrays, trees and multidimensional
arrays are also possible.
If we want to categorize the array, then there are mainly three types of arrays:
Numeric array
Associative array
Multidimensional array
*/
//Numeric arrays -
// we have an array defined and indexes are autogenerated from 0 and
// incremented with the value of the array
$array = [10,20,30,40,50];
$array[] = 70;
$array[] = 80;
$arraySize = count($array);
for($i = 0;$i<$arraySize;$i++) {
  echo "Position ".$i." holds the value ".$array[$i]."\n";
};
// Non-sequential array in php and iteration with foreach loop
$array = [];
$array[10] = 100;
$array[21] = 200;
$array[29] = 300;
$array[500] = 1000;
$array[1001] = 10000;
$array[71] = 1971;
foreach($array as $index => $value) {
  echo "Position ".$index." holds the value ".$value."\n";
};
//Associative array of key -> value pairsinitialized and iterated with foreach loop
$studentInfo = [];
$studentInfo['Name'] = "Adiyan";
$studentInfo['Age'] = 11;
$studentInfo['Class'] = 6;
$studentInfo['RollNumber'] = 71;
$studentInfo['Contact'] = "info@adiyan.com";
foreach($studentInfo as $key => $value) {
  echo $key.": ".$value."\n";
}

// Multidimensional array example with nested foreach loop iteration
$players = [];
$players[] = ["Name" => "Ronaldo", "Age" => 31, "Country" => "Portugal", "Team" => "Real Madrid"];
$players[] = ["Name" => "Messi", "Age" => 27, "Country" => "Argentina", "Team" => "Barcelona"];
$players[] = ["Name" => "Neymar", "Age" => 24, "Country" => "Brazil", "Team" => "Barcelona"];
$players[] = ["Name" => "Rooney", "Age" => 30, "Country" => "England", "Team" => "Man United"];
foreach($players as $index => $playerInfo) {
  echo "Info of player # ".($index+1)."\n";
  foreach($playerInfo as $key => $value) {
      echo $key.": ".$value."\n";
    }
    echo "\n";
};

/*
In case we want some class for example some student class datastructure to be
 iterated, but we dont want to expose its implementation to other class, PHP
offers a solution for that in ArrayIterator($arrayToIterate) class which takes
array to be implemented as a parameter
*/
$it = new ArrayIterator($array);
while($it->valid()){
  echo $it->current()."\n";
  $it->next();
}

/*
SplFixedArray - in case we actually need Array in real sense like in C/C++
in order to lower consumption of CPU and preserve memory space
*/
//Converting existing php $array to SplFixedArray:
$splArray = SplFixedArray::fromArray($array, false);
$splArray[1] = "John";
$splArray[3] = "Mina";
print_r($splArray);

//Creating it from scratch
$newSplArray = new SplFixedArray(10); // arg -> 10 element array
for($i=0;$i<$newSplArray->getSize();$i++){
  $newSplArray[$i] = $i*2;
}
while($newSplArray->valid()){
  echo $newSplArray->current()."\n";
  $newSplArray->next();
}
?>
